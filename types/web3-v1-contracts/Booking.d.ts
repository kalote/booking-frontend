/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type bookingCancelled = ContractEventLog<{
  id: string;
  company: string;
  by: string;
  0: string;
  1: string;
  2: string;
}>;
export type roomBooked = ContractEventLog<{
  id: string;
  company: string;
  by: string;
  at: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface Booking extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Booking;
  clone(): Booking;
  methods: {
    roomCount(): NonPayableTransactionObject<string>;

    rooms(arg0: number | string | BN): NonPayableTransactionObject<{
      id: string;
      company: string;
      booked: boolean;
      bookedBy: string;
      bookedAt: string;
      0: string;
      1: string;
      2: boolean;
      3: string;
      4: string;
    }>;

    book(
      _id: number | string | BN,
      _time: number | string | BN
    ): NonPayableTransactionObject<void>;

    cancel(_id: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    bookingCancelled(cb?: Callback<bookingCancelled>): EventEmitter;
    bookingCancelled(
      options?: EventOptions,
      cb?: Callback<bookingCancelled>
    ): EventEmitter;

    roomBooked(cb?: Callback<roomBooked>): EventEmitter;
    roomBooked(options?: EventOptions, cb?: Callback<roomBooked>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "bookingCancelled", cb: Callback<bookingCancelled>): void;
  once(
    event: "bookingCancelled",
    options: EventOptions,
    cb: Callback<bookingCancelled>
  ): void;

  once(event: "roomBooked", cb: Callback<roomBooked>): void;
  once(
    event: "roomBooked",
    options: EventOptions,
    cb: Callback<roomBooked>
  ): void;
}
